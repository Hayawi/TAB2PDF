<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="11.3">
  <zoom_level>10</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>100</x>
      <y>190</y>
      <w>260</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>&lt;&lt;utility&gt;&gt;
Package::base_system
ReadAscii
--
+readFile(String s): String
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>370</x>
      <y>0</y>
      <w>280</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Main Class&gt;&gt;
Package::base_system
TAB2PDF
--
+main(String[] args): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>370</x>
      <y>190</y>
      <w>280</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Package::base_system
Tablature
--
-s: String
-header: String[]
-headerExists: boolean
--
+Tablature(String s): String
+setAscii(String s): boolean
+getAscii(): String
+getHeader(): String[]
-checkHeaderExists(): boolean
+parseHeader(): String[]
+hasHeader(): boolean</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>660</x>
      <y>190</y>
      <w>420</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Utility&gt;&gt;
Package::base_system
CreatePDF
--
drawHeader(PdfContentByte: String[]): boolean 
drawStaff(PdfContentByte, int): boolean
writePDF(String,Tablature): boolean</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>200</x>
      <y>50</y>
      <w>190</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>170;30;30;140</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>450</x>
      <y>90</y>
      <w>92</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
m1=1...many</panel_attributes>
    <additional_attributes>50;30;50;100</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>620</x>
      <y>50</y>
      <w>190</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>30;30;170;140</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.custom.Systemborder</type>
    <coordinates>
      <x>190</x>
      <y>520</y>
      <w>650</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>The read file class uses a special library to read in the entire ascii file
as one big String.  The string is passed to the constructor of the Tablature
class which creates an instance of Tablature.  The Tablature class has static
methods which parse all parts of the string into parts such as the header 
and musical notes.  The non-static methods of Tablature 
enable personalized settings for each Tablature created. 
Such as changing fonts, adjusting spacing. The main class TAB2PDF then 
passes this Tablature ojbect to the WritePDF utlity class which calls 
methods to write the parts of the tablautre to a PDF file. If we decide to add
the ability to write Doc or power point files we only need to create a new
utility class WriteDoc or WritePowerPoint and send the tab file to them instead.
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
