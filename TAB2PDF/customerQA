This is essentially the requirements document.  Since we are using the agile method, our weekly meetings build onto this 
list of questions and answers. 

Q1:
	Do you want us to always assume that the music tabs will have a header including the TITLE, SUBTITLE and SPACING? If it's not
	included do you want the program to:
		1. stop execution and display an error message
		2. create the tab pdf file and notify the user that no header information was included.
		3. create the tab pdf without header information and display no notification.
		4. create the tab pdf with a header which is the filename of the input text file.
A1:
	Piuck
	
Q2:
	Will you only be converting one text file at a time or many?

A2:
	The customer may have multiple files to convert.

Q3:
	Is the original text file to be deleted after the pdf version is created?

A3:
	No.

Q4:
	How do you want this program to be different from other TAB2PDF programs which are already available?

A4:
	The customer does not know of any other TAB2PDF programs.

Q5:
	Are you interested in drop and drag functionality? For example, you may drag your text file on top of the application icon
	 and have it produce the pdf version in the same directory.

A5:
	The customer says "Sounds cool". Your instructor would caution you to consider how critical such a feature is at this point.
	We should decide for ourselves what would be best for the customer. Keeping in mind that a user-friendly interface is critical.

Q6:
	What platform are you using?

A6:
	Any of the major ones, implementation is supposed to be portable, which is why we use Java.

Q7:
	Do you want too use it on multiple platforms?

A7:
	Yes.
	
Q8:
	Do you intend on extending the software in the future? For instance converting to other formats such as word or power-point files?

A8:
	Definitely a possibility.
	
Q9:
	What is our target demographic?
A9:	
	Whether it is a beginner guitarist or expert, they are average computer users. 
	They know how to open an application and use the most basic features. 
	Anything over-complicated is outside their knowledge.
	
	- The user knows computer basics, nothing too crazy. Think of the user as a typical apple user. 
	
	- Giving the user tips to use your program is an interesting way to help the user navigate your program.
	 	Make sure there is an option to disable it for the expert user. 
	
	- Try to keep functions 2-3 clicks away, more than that may be difficult for the average user to navigate. 
	  
Q10:
	Can we use another language or another java library?

A10:
	Feel free to use any tools you would like, but be cautious, the professor and the TA will not be able to assist you
	if you venture out on your own. Professor recommends to stay in Java. 

Q11:
	Should we make a web application?

A12:
	Would be an interesting solution, keep in mind that we are on our own in that scenario. Professor suggests 
	keeping it simple to start off with, then if finished early can translate into whatever interface we wish
	 as long as we have the base functionality. 

Q13:
	Is performance a major concern?
	
A13:	
	No  performance is not a huge deal, “I don’t care whether your program runs in a tenth of a second or a half of a second.”

Q14:
	Is there are preference for the styling of the application?

A14:
	Completely up to us to decide. We can bring in sketches or setups of our interface and ask for approval. 
	Keep it minimalistic and easy to navigate. 
	
	
