Requirements
        - Convert the lines (vertical and horizontal) from ASCII note to PDF lines
        - Convert the numbers into their positions in the PDF
        - Calculate the SPACING between the notes
        - Place in the symbols (s, h, p, etc.) into their respective representations in the PDF
        - Decide on whether we are using a ‘Drag-and-Drop’ functionality
        - Simple UI enough to be usable by average computer users
        - Recommended to stay in Java but other languages/libraries are allowed
        - Venture off on our own without Professor’s aid, but only if the skeleton is finished early (maybe web application?)
        - Speed doesn’t matter, as long as it works
        - ‘Help’ option for average users but removable for the experts. User’s manual is necessary but opening it is optional
        - Easy to navigate through the program
        - Return error messages if input file is corrupt or incomplete
        - Multiple inputs/outputs to differ us from the other groups
        - If the header is missing (or any none-vital part) then the program should run without it (as long as music is there then it all goes)
        - Documented user manual. Since we decided on it, then a video instruction manual should be available too
        - As long as it works in Eclipse then all is well, also in Java
        - Use Github to transport or transfer our program to different places
        - HAVE SOMETHING TO PUT ON THE BIG SCREEN!
        -	Fine tune the output (Centre it, rearrange the numbers, readjust lines etc.)
        -	Implement the spacing into the output
        -	Strings/bars should fit comfortably in page (if input has 3 bars but only 2 can fit then place excess on new line)
        -	If we are going to get the program to play music as part of the preview then it is either perfect or we don’t do it at all
        -	Some advice on split up coding: COMMUNICATION!!! Through this we can adapt one of the two:
          o	Pair programming (2 at once with one looking over the other’s shoulder)
          o	Continuous integration (requires often meetings between coders)
        -	GUI testing is something that is going to be done in 4th year, not yet, but it should be very easy to use and aesthetically pleasing. It should follow standard practices (FlowLayout, button placement etc.)
        -	The program should be customizable by the user (i.e. font, color, spacing) through the program.
          o	This also means that the preview will be essential for this part.

